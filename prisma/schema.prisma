// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Cient         Client[]
    Technic       Technic[]
    Assignment    Assignment[]
    Service       Service[]
    Shop          Shop[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Service {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deletedBy String?
    user      User?     @relation(fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Client {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deletedBy String?
    user      User?     @relation(fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Technic {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deletedBy String?
    user      User?     @relation(fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Shop {
    id         String       @id @default(cuid())
    name       String
    city       String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    deletedAt  DateTime?
    deletedBy  String?
    user       User?        @relation(fields: [deletedBy], references: [id], onDelete: Cascade)
    Assignment Assignment[]
}

model Assignment {
    id           String           @id @default(cuid())
    shopId       String
    clientId     String
    technicId    String
    labelId      String
    informations String?
    dateActivity DateTime
    position     Int
    status       AssignmentStatus
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    deletedAt    DateTime?
    deletedBy    String?
    user         User?            @relation(fields: [deletedBy], references: [id], onDelete: Cascade)
    shop         Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

enum AssignmentStatus {
    PENDING
    IN_PROGRESS
    FINALIZED
    CANCELED
}
